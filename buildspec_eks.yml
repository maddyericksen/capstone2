version: 0.2
phases:
  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
  pre_build:
    commands:
      - echo "Logging into Amazon EKS..."
      - aws eks --region us-west-2 update-kubeconfig --name grp3-cap2a-cluster
      - echo "Check config"
      - kubectl config view --minify
      - echo "Check kubectl access"
      - kubectl get svc
      - echo "Setting execution variables..."
      - ECR_URI=`echo ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com`
      - REPOSITORY_URI=`echo ${ECR_URI}/${IMAGE_REPO_NAME}`
      - echo "Logging execution variables:"
      - echo "  variable  ECR_URI=`echo ${ECR_URI}`"
      - echo "  variable  REPOSITORY_URI=`echo ${REPOSITORY_URI}`"
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URI
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - echo "Target image and tag name...  ${REPOSITORY_URI}:$IMAGE_TAG"
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG ${REPOSITORY_URI}:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push ${REPOSITORY_URI}:$IMAGE_TAG
      - echo "Writing image definitions file..."
      - echo "Image definitions content *should* be:"
      - printf '[{"name":"'$CONTAINER_NAME'","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG
      - printf '[{"name":"'$CONTAINER_NAME'","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - kubectl apply -f deployment.yaml
      - kubectl apply -f service.yaml
      - kubectl apply -f ingress.yaml
      - kubectl rollout restart -f deployment.yaml
      - kubectl get svc --all-namespaces
artifacts:
  files:
    - imagedefinitions.json